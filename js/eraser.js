// Generated by CoffeeScript 1.6.2
(function() {
  
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating 
// requestAnimationFrame polyfill by Erik MÃ¶ller
// fixes from Paul Irish and Tino Zijdel
 (function() {
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
		window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
		window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
								   || window[vendors[x]+'CancelRequestAnimationFrame'];
	}
	if (!window.requestAnimationFrame) {
		window.requestAnimationFrame = function(callback, element) {
			var currTime = new Date().getTime();
			var timeToCall = Math.max(0, 16 - (currTime - lastTime));
			var id = window.setTimeout(function() { callback(currTime + timeToCall); },
			  timeToCall);
			lastTime = currTime + timeToCall;
			return id;
		};
	}
	if (!window.cancelAnimationFrame) {
		window.cancelAnimationFrame = function(id) {
			clearTimeout(id);
		};
	}
}());
;
  var Body, BodyDef, CatSprite, CircleShape, ContactListener, CupcakeSprite, DEBUG_PHYSICS, DebugDraw, Fixture, FixtureDef, GRAVITY, HeroSprite, ImageGroup, K, MPP, MassData, PIXELS_PER_METER, Pencil, PolygonShape, STATUS_ACTIVE, STATUS_LOSE, STATUS_WIN, TAU, TILE_HEIGHT, TILE_SIZE, TILE_TYPE_DISTRACTION, TILE_TYPE_EMPTY, TILE_TYPE_SOLID, TILE_WIDTH, Tile, Vec2, WORLD_HEIGHT, WORLD_WIDTH, World, World1, World2, WorldManifold, b2World, canvas, clearBackground, createBox, deltaSeconds, doc, dt, firstLevel, g, images, mouseDown, mousePressed, mouseReleased, mouseX, mouseY, pencil, pixToTile, queueFrame, randRange, rawMillis, scratchManifold, secondLevel, seconds, setupPhysics, showPhysics, startScreen, tileId, time, world,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ImageGroup = (function() {
    function ImageGroup(paths) {
      var path, stripName, _fn, _i, _len,
        _this = this;

      stripName = function(path) {
        var i, result, s, tokens, _i, _ref;

        result = path.replace(/^.*[\\\/]/, '').split('.')[0];
        if (result.indexOf("_") !== -1) {
          tokens = result.split('_');
          result = tokens[0];
          for (i = _i = 1, _ref = tokens.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
            s = tokens[i];
            result = result + s[0].toUpperCase() + s.substring(1, s.length);
          }
        }
        return result;
      };
      this.numLoading = paths.length;
      this.numFailed = 0;
      _fn = function(path) {
        var img;

        img = new Image();
        img.onload = function() {
          return _this.numLoading--;
        };
        img.onerror = img.onabort = function() {
          _this.numLoading--;
          return _this.numFailed++;
        };
        img.src = path;
        return _this[stripName(path)] = img;
      };
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        _fn(path);
      }
    }

    ImageGroup.prototype.loading = function() {
      return this.numLoading > 0;
    };

    ImageGroup.prototype.complete = function() {
      return this.numLoading === 0 && this.numFailed === 0;
    };

    ImageGroup.prototype.failed = function() {
      return this.numFailed > 0;
    };

    return ImageGroup;

  })();

  randRange = function(x, y) {
    return x + Math.random() * (y - x);
  };

  b2World = Box2D.Dynamics.b2World;

  Vec2 = Box2D.Common.Math.b2Vec2;

  BodyDef = Box2D.Dynamics.b2BodyDef;

  Body = Box2D.Dynamics.b2Body;

  FixtureDef = Box2D.Dynamics.b2FixtureDef;

  Fixture = Box2D.Dynamics.b2Fixture;

  MassData = Box2D.Collision.Shapes.b2MassData;

  PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  DebugDraw = Box2D.Dynamics.b2DebugDraw;

  WorldManifold = Box2D.Collision.b2WorldManifold;

  ContactListener = Box2D.Dynamics.b2ContactListener;

  TAU = Math.PI + Math.PI;

  canvas = null;

  g = null;

  mouseX = 0;

  mouseY = 0;

  mousePressed = false;

  mouseReleased = false;

  mouseDown = false;

  rawMillis = function() {
    return new Date().getTime();
  };

  dt = 0;

  time = 0;

  seconds = function() {
    return 0.001 * time;
  };

  deltaSeconds = function() {
    return 0.001 * dt;
  };

  scratchManifold = new WorldManifold;

  queueFrame = function(state) {
    dt = rawMillis() - time;
    time = rawMillis();
    dt = Math.min(dt, 22);
    mousePressed = false;
    mouseReleased = false;
    return requestAnimationFrame(state);
  };

  clearBackground = function() {
    return g.clearRect(0, 0, canvas.width, canvas.height);
  };

  TILE_SIZE = 32;

  TILE_WIDTH = 26;

  TILE_HEIGHT = 16;

  WORLD_WIDTH = TILE_SIZE * TILE_WIDTH;

  WORLD_HEIGHT = TILE_SIZE * TILE_HEIGHT;

  GRAVITY = 32;

  TILE_TYPE_EMPTY = 0;

  TILE_TYPE_SOLID = 1;

  TILE_TYPE_DISTRACTION = 2;

  K = 1.0 / 32.0;

  pixToTile = function(x) {
    return Math.floor(K * x);
  };

  tileId = function(x, y) {
    return x + TILE_WIDTH * y;
  };

  PIXELS_PER_METER = 32;

  DEBUG_PHYSICS = true;

  showPhysics = false;

  pencil = null;

  Pencil = (function() {
    function Pencil() {
      pencil = this;
      this.rubTime = 0;
    }

    Pencil.prototype.draw = function() {
      var angle, dx, dy, u;

      g.save();
      dx = mouseX - (canvas.width >> 1);
      dy = mouseY - (0.666 * canvas.height);
      angle = Math.atan2(dy, dx);
      g.translate(mouseX, mouseY);
      g.rotate(angle + Math.PI);
      if (!mouseDown) {
        g.drawImage(images.pencil, -images.pencil.width, -10);
      } else {
        if (mousePressed) {
          this.rubTime = 0;
        } else {
          this.rubTime += deltaSeconds();
        }
        u = 0.5 * Math.sin(TAU * 5 * this.rubTime);
        g.drawImage(images.pencil, u * 20 - images.pencil.width, -u * 4 - 10);
      }
      return g.restore();
    };

    return Pencil;

  })();

  world = null;

  STATUS_ACTIVE = 0;

  STATUS_WIN = 1;

  STATUS_LOSE = 2;

  World = (function() {
    function World(options) {
      var i, _i, _j, _len, _len1, _ref, _ref1;

      if (world != null) {
        world.onDestroy();
      }
      world = this;
      this.tilemap = options.tilemap;
      this.offsetX = 0.5 * (canvas.width - WORLD_WIDTH) + 2;
      this.offsetY = 0.5 * (canvas.height - WORLD_HEIGHT) + 20;
      this.physics = setupPhysics();
      this.mPhysicsMouse = Vec2.Make(0, 0);
      this.tiles = (function() {
        var _i, _ref, _results;

        _results = [];
        for (i = _i = 0, _ref = TILE_WIDTH * TILE_HEIGHT - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(new Tile(i));
        }
        return _results;
      })();
      if (options.solidTiles != null) {
        _ref = options.solidTiles;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          this.tiles[i].setSolid();
        }
      }
      if (options.distractionTiles != null) {
        _ref1 = options.distractionTiles;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          i = _ref1[_j];
          this.tiles[i].setDistracting();
        }
      }
      this.status = STATUS_ACTIVE;
    }

    World.prototype.onTick = function() {};

    World.prototype.onDraw = function() {};

    World.prototype.onDestroy = function() {};

    World.prototype.physicsMouse = function() {
      this.mPhysicsMouse.Set((mouseX - this.offsetX) / PIXELS_PER_METER, (mouseY - this.offsetY) / PIXELS_PER_METER);
      return this.mPhysicsMouse;
    };

    World.prototype.tick = function() {
      var _ref;

      if (this.status !== STATUS_ACTIVE) {
        return;
      }
      this.physics.Step(deltaSeconds(), 10, 10);
      if (this.status === STATUS_ACTIVE) {
        if (mouseDown) {
          if ((_ref = this.tileUnder(mouseX, mouseY)) != null) {
            _ref.erase();
          }
        }
        return this.onTick();
      }
    };

    World.prototype.draw = function() {
      var tile, _i, _len, _ref;

      g.save();
      g.translate(this.offsetX, this.offsetY);
      if (DEBUG_PHYSICS && showPhysics) {
        this.physics.DrawDebugData();
      }
      _ref = this.tiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        tile.draw();
      }
      this.onDraw();
      return g.restore();
    };

    World.prototype.getTile = function(x, y) {
      if (x >= 0 && x < TILE_WIDTH && y >= 0 && y < TILE_HEIGHT) {
        return this.tiles[tileId(x, y)];
      } else {
        return null;
      }
    };

    World.prototype.tileUnder = function(px, py) {
      return this.getTile(Math.floor((px - this.offsetX) / TILE_SIZE), Math.floor((py - this.offsetY) / TILE_SIZE));
    };

    return World;

  })();

  setupPhysics = function() {
    var body, bodyDef, debugDraw, fixDef, physics;

    physics = new b2World(new Vec2(0, GRAVITY), false);
    bodyDef = new BodyDef;
    bodyDef.type = Body.b2_staticBody;
    bodyDef.position.Set(TILE_WIDTH / 2, TILE_HEIGHT + 0.5);
    fixDef = new FixtureDef;
    fixDef.density = 1.0;
    fixDef.friction = 0.5;
    fixDef.restitution = 0.2;
    fixDef.shape = new PolygonShape;
    fixDef.shape.SetAsBox(TILE_WIDTH / 2 + 1, 0.5);
    bodyDef.position.y = -0.5;
    body = physics.CreateBody(bodyDef).CreateFixture(fixDef);
    fixDef.shape = new PolygonShape;
    fixDef.shape.SetAsBox(0.5, TILE_HEIGHT / 2);
    bodyDef.position.Set(-0.5, TILE_HEIGHT / 2);
    physics.CreateBody(bodyDef).CreateFixture(fixDef);
    bodyDef.position.x = TILE_WIDTH + 0.5;
    physics.CreateBody(bodyDef).CreateFixture(fixDef);
    if (DEBUG_PHYSICS) {
      debugDraw = new DebugDraw();
      debugDraw.SetSprite(g);
      debugDraw.SetDrawScale(PIXELS_PER_METER);
      debugDraw.SetFillAlpha(0.5);
      debugDraw.SetLineThickness(4.0);
      debugDraw.SetFlags(DebugDraw.e_shapeBit | DebugDraw.e_jointBit);
      physics.SetDebugDraw(debugDraw);
    }
    return physics;
  };

  World1 = (function(_super) {
    __extends(World1, _super);

    function World1() {
      var listener,
        _this = this;

      World1.__super__.constructor.call(this, firstLevel);
      this.hero = new HeroSprite(firstLevel.hero);
      this.cupcake = new CupcakeSprite(firstLevel.cupcake);
      listener = new ContactListener;
      listener.BeginContact = function(contact) {
        if (contact.GetFixtureA().GetBody().GetUserData() === _this.hero) {
          if (contact.GetFixtureB().GetBody().GetUserData() === _this.cupcake) {
            return _this.status = STATUS_WIN;
          }
        } else if (contact.GetFixtureB().GetBody().GetUserData() === _this.hero) {
          if (contact.GetFixtureA().GetBody().GetUserData() === _this.cupcake) {
            return _this.status = STATUS_WIN;
          }
        }
      };
      this.physics.SetContactListener(listener);
    }

    World1.prototype.onTick = function() {
      this.cupcake.tick();
      this.hero.tick();
      if (this.cupcake.outOfBounds() || this.hero.outOfBounds()) {
        return this.status = STATUS_LOSE;
      }
    };

    World1.prototype.onDraw = function() {
      this.cupcake.draw();
      return this.hero.draw();
    };

    return World1;

  })(World);

  MPP = 1.0 / PIXELS_PER_METER;

  createBox = function(x, y, w, h) {
    var dx, dy, result, vert, _i, _len, _ref;

    result = new PolygonShape;
    result.SetAsBox(0.5 * MPP * w, 0.5 * MPP * h);
    dx = MPP * x - (-0.5 * MPP * w);
    dy = MPP * y - (-0.5 * MPP * h);
    _ref = result.GetVertices();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vert = _ref[_i];
      vert.x += dx;
      vert.y += dy;
    }
    return result;
  };

  CatSprite = (function() {
    function CatSprite(i, options) {
      var bodyDef, fixDef, shape, _i, _len, _ref;

      i += 1;
      this.image = i >= 10 ? images['cat' + i] : images['cat0' + i];
      bodyDef = new BodyDef;
      bodyDef.type = Body.b2_dynamicBody;
      bodyDef.linearDamping = 0.0;
      bodyDef.position.Set(options.x, options.y);
      bodyDef.angle = options.a;
      this.body = world.physics.CreateBody(bodyDef);
      fixDef = new FixtureDef;
      fixDef.density = 2;
      fixDef.friction = 0.4;
      fixDef.restitution = 0.9;
      _ref = options.shapes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        if ('r' in shape) {
          fixDef.shape = new CircleShape(MPP * shape.r);
          fixDef.shape.SetLocalPosition(Vec2.Make(MPP * shape.x, MPP * shape.y));
          this.body.CreateFixture(fixDef);
        } else {
          fixDef.shape = createBox(shape.x, shape.y, shape.w, shape.h);
          this.body.CreateFixture(fixDef);
        }
      }
      this.body.SetUserData(this);
      this.next = null;
      this.prev = null;
      this.isAlive = true;
      this.alpha = 1;
    }

    CatSprite.prototype.destroy = function() {
      this.next = null;
      this.prev = null;
      world.physics.DestroyBody(this.body);
      return this.isAlive = false;
    };

    CatSprite.prototype.outOfBounds = function() {
      return this.body.GetPosition().y > TILE_HEIGHT + 5;
    };

    CatSprite.prototype.draw = function() {
      var p;

      p = this.body.GetPosition();
      g.save();
      g.translate(32 * p.x, 32 * p.y);
      g.rotate(this.body.GetAngle());
      g.drawImage(this.image, 0, 0);
      return g.restore();
    };

    CatSprite.prototype.drawFadeOut = function() {
      var p;

      p = this.body.GetPosition();
      this.alpha *= 0.75;
      g.save();
      g.globalAlpha = this.alpha;
      g.translate(32 * p.x, 32 * p.y);
      g.rotate(this.body.GetAngle());
      g.drawImage(this.image, 0, 0);
      g.restore();
      return this.alpha < 0.02;
    };

    return CatSprite;

  })();

  World2 = (function(_super) {
    __extends(World2, _super);

    function World2() {
      var cat, i, _i, _ref, _ref1;

      World2.__super__.constructor.call(this, secondLevel);
      this.firstCat = null;
      this.fadingCats = null;
      for (i = _i = _ref = secondLevel.cats.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        cat = new CatSprite(i, secondLevel.cats[i]);
        cat.next = this.firstCat;
        if ((_ref1 = this.firstCat) != null) {
          _ref1.prev = cat;
        }
        this.firstCat = cat;
      }
    }

    World2.prototype.destroyCat = function(cat) {
      var _ref, _ref1, _ref2;

      if (!cat.isAlive) {
        return;
      }
      if ((_ref = cat.next) != null) {
        _ref.prev = cat.prev;
      }
      if ((_ref1 = cat.prev) != null) {
        _ref1.next = cat.next;
      }
      if (cat === this.firstCat) {
        this.firstCat = cat.next;
      }
      cat.destroy();
      cat.next = this.fadingCats;
      if ((_ref2 = this.fadingCats) != null) {
        _ref2.prev = cat;
      }
      return this.fadingCats = cat;
    };

    World2.prototype.onTick = function() {
      var cat, selectFixture, _results,
        _this = this;

      if (mouseDown) {
        selectFixture = function(fixture) {
          var _ref;

          if (((_ref = fixture.GetBody().GetUserData()) != null ? _ref.constructor : void 0) === CatSprite) {
            _this.destroyCat(fixture.GetBody().GetUserData());
          }
          return false;
        };
        this.physics.QueryPoint(selectFixture, this.physicsMouse());
      }
      if (this.firstCat != null) {
        cat = this.firstCat;
        _results = [];
        while (cat != null) {
          if (cat.outOfBounds()) {
            this.status = STATUS_LOSE;
            break;
          }
          _results.push(cat = cat.next);
        }
        return _results;
      } else {
        if (this.fadingCats == null) {
          return this.status = STATUS_WIN;
        }
      }
    };

    World2.prototype.onDraw = function() {
      var c, next, _ref, _ref1, _results;

      c = this.firstCat;
      while (c != null) {
        c.draw();
        c = c.next;
      }
      c = this.fadingCats;
      _results = [];
      while (c != null) {
        next = c.next;
        if (c.drawFadeOut()) {
          if ((_ref = c.next) != null) {
            _ref.prev = c.prev;
          }
          if ((_ref1 = c.prev) != null) {
            _ref1.next = c.next;
          }
          if (c === this.fadingCats) {
            this.fadingCats = c.next;
          } else {

          }
        }
        _results.push(c = next);
      }
      return _results;
    };

    World2.prototype.onDestroy = function() {
      return doc.off('keydown.world2');
    };

    return World2;

  })(World);

  Tile = (function() {
    function Tile(i) {
      this.x = i % TILE_WIDTH;
      this.y = (i - this.x) / TILE_WIDTH;
      this.type = TILE_TYPE_EMPTY;
      this.body = null;
    }

    Tile.prototype.isSolid = function() {
      return this.type === TILE_TYPE_SOLID;
    };

    Tile.prototype.isVisible = function() {
      return this.type !== TILE_TYPE_EMPTY;
    };

    Tile.prototype.setSolid = function() {
      var bodyDef, fixDef;

      if (this.type !== TILE_TYPE_EMPTY) {
        alert('EEK!');
      }
      this.type = TILE_TYPE_SOLID;
      fixDef = new FixtureDef;
      fixDef.density = 1;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.2;
      bodyDef = new BodyDef;
      bodyDef.type = Body.b2_staticBody;
      bodyDef.position.Set(this.x + 0.5, this.y + 0.5);
      fixDef.shape = new PolygonShape;
      fixDef.shape.SetAsBox(0.5, 0.5);
      this.body = world.physics.CreateBody(bodyDef);
      this.body.CreateFixture(fixDef);
      return this.body.SetUserData(this);
    };

    Tile.prototype.setDistracting = function() {
      if (this.type !== TILE_TYPE_EMPTY) {
        alert('ACK!');
      }
      return this.type = TILE_TYPE_DISTRACTION;
    };

    Tile.prototype.erase = function() {
      if (this.type === TILE_TYPE_EMPTY) {
        return false;
      }
      if (this.body != null) {
        world.physics.DestroyBody(this.body);
        this.body = null;
      }
      this.type = TILE_TYPE_EMPTY;
      return true;
    };

    Tile.prototype.draw = function() {
      var x, y;

      if (!this.isVisible()) {
        return;
      }
      x = this.x << 5;
      y = this.y << 5;
      return g.drawImage(world.tilemap, x + x, y + y, 64, 64, x - 16, y - 16, 64, 64);
    };

    return Tile;

  })();

  HeroSprite = (function() {
    function HeroSprite(options) {
      var bodyDef, fixDef, vert, _i, _len, _ref;

      this.walkingSpeed = options.walkingSpeed;
      bodyDef = new BodyDef;
      bodyDef.fixedRotation = true;
      bodyDef.type = Body.b2_dynamicBody;
      bodyDef.position.Set(options.x, options.y);
      this.body = world.physics.CreateBody(bodyDef);
      fixDef = new FixtureDef;
      fixDef.density = 1;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.2;
      fixDef.shape = new PolygonShape;
      fixDef.shape.SetAsBox(0.45, 0.7);
      _ref = fixDef.shape.GetVertices();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vert = _ref[_i];
        vert.y -= 0.255;
      }
      this.body.CreateFixture(fixDef);
      fixDef.shape = new CircleShape(0.45);
      fixDef.shape.SetLocalPosition(new Vec2(0, 0.5));
      this.body.CreateFixture(fixDef);
      this.body.SetUserData(this);
    }

    HeroSprite.prototype.outOfBounds = function() {
      var p;

      p = this.body.GetPosition();
      return p.x < -1 || p.x > TILE_WIDTH + 1 || p.y > TILE_HEIGHT + 2;
    };

    HeroSprite.prototype.draw = function() {
      var frame, h, p, w, x, y;

      p = this.body.GetPosition();
      x = 32 * (p.x - 0.5) - 6;
      y = 32 * (p.y - 1);
      frame = Math.floor(seconds() * 10) % 10;
      w = images.walk.width;
      h = images.walk.height / 10;
      if (this.walkingSpeed < 0) {
        g.save();
        g.translate(x, y);
        g.translate(w / 2, 0);
        g.scale(-1, 1);
        g.drawImage(images.walk, 0, frame * h, w, h, -w / 2, 0, w, h + 2);
        return g.restore();
      } else {
        return g.drawImage(images.walk, 0, frame * h, w, h, x, y, w, h + 2);
      }
    };

    HeroSprite.prototype.tick = function() {
      var didHitWall, edge, isGrounded, vel;

      isGrounded = false;
      didHitWall = false;
      edge = this.body.GetContactList();
      while (edge != null) {
        if (edge.other.GetType() === Body.b2_staticBody) {
          edge.contact.GetWorldManifold(scratchManifold);
          if (scratchManifold.m_normal.y < -0.95) {
            isGrounded = true;
          } else if (!didHitWall) {
            if (this.walkingSpeed > 0) {
              if (scratchManifold.m_normal.x > 0.95) {
                didHitWall = true;
              }
            } else {
              if (scratchManifold.m_normal.x < -0.95) {
                didHitWall = true;
              }
            }
          }
        }
        edge = edge.next;
      }
      if (isGrounded) {
        if (didHitWall) {
          this.walkingSpeed = -this.walkingSpeed;
        }
        vel = this.body.GetLinearVelocity();
        vel.x = this.walkingSpeed;
        return this.body.SetLinearVelocity(vel);
      }
    };

    return HeroSprite;

  })();

  CupcakeSprite = (function() {
    function CupcakeSprite(options) {
      var bodyDef, fixDef;

      bodyDef = new BodyDef;
      bodyDef.fixedRotation = true;
      bodyDef.type = Body.b2_dynamicBody;
      bodyDef.position.Set(options.x, options.y);
      this.body = world.physics.CreateBody(bodyDef);
      fixDef = new FixtureDef;
      fixDef.density = 1;
      fixDef.friction = 0.5;
      fixDef.restitution = 0.2;
      fixDef.shape = new PolygonShape;
      fixDef.shape.SetAsBox(0.95, 0.95);
      this.body.CreateFixture(fixDef);
      this.body.SetUserData(this);
    }

    CupcakeSprite.prototype.outOfBounds = function() {
      var p;

      p = this.body.GetPosition();
      return p.x < -1 || p.x > TILE_WIDTH + 1 || p.y > TILE_HEIGHT + 2;
    };

    CupcakeSprite.prototype.draw = function() {
      var frame, h, p, w, x, y;

      frame = Math.floor(seconds() * 7.5) % 6;
      w = images.cupcake.width;
      h = images.cupcake.height / 6;
      p = this.body.GetPosition();
      x = 32 * (p.x - 1);
      y = 32 * (p.y - 1) + 4;
      return g.drawImage(images.cupcake, 0, frame * h, w, h, x, y, w, h);
    };

    CupcakeSprite.prototype.tick = function() {};

    return CupcakeSprite;

  })();

  images = new ImageGroup(['images/pencil.png', 'images/background.jpg', 'images/walk.png', 'images/cupcake.png', 'images/first_baked.png', 'images/startScreen_baked.png', 'images/loseScreen.png', 'images/winScreen.png', 'images/heart1.png', 'images/second_baked.png', "images/cat_01.png", "images/cat_02.png", "images/cat_03.png", "images/cat_04.png", "images/cat_05.png", "images/cat_06.png", "images/cat_07.png", "images/cat_08.png", "images/cat_09.png", "images/cat_10.png", "images/cat_11.png", "images/cat_12.png", "images/cat_13.png", "images/cat_14.png", "images/cat_15.png", "images/cat_16.png", "images/cat_17.png", "images/cat_18.png"]);

  startScreen = {
    tilemap: images.startScreenBaked,
    solidTiles: [tileId(11, 8), tileId(12, 8), tileId(13, 8), tileId(14, 8), tileId(11, 9), tileId(12, 9), tileId(13, 9), tileId(14, 9), tileId(11, 10), tileId(12, 10), tileId(13, 10), tileId(14, 10), tileId(11, 11), tileId(12, 11), tileId(13, 11), tileId(14, 11)]
  };

  firstLevel = (function() {
    var i, options;

    options = {
      tilemap: images.firstBaked,
      solidTiles: (function() {
        var _i, _ref, _results;

        _results = [];
        for (i = _i = 0, _ref = TILE_WIDTH - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(tileId(i, 14));
        }
        return _results;
      })(),
      distractionTiles: (function() {
        var _i, _ref, _results;

        _results = [];
        for (i = _i = 0, _ref = TILE_WIDTH - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(tileId(i, 15));
        }
        return _results;
      })(),
      hero: {
        x: 1,
        y: 8,
        walkingSpeed: 4
      },
      cupcake: {
        x: 20,
        y: 9
      }
    };
    options.solidTiles.push(tileId(12, 10), tileId(12, 11), tileId(12, 12), tileId(12, 13), tileId(13, 10), tileId(13, 11));
    return options;
  })();

  secondLevel = {
    tilemap: images.secondBaked,
    solidTiles: [241, 242, 243, 268, 269, 294, 295, 296, 297, 298, 299, 300, 301, 302, 320, 321, 322, 323, 324, 325, 326, 327, 328, 350, 351, 352],
    distractionTiles: [267, 270, 271, 275, 276, 272, 273, 274, 348, 349, 353, 354],
    cats: [
      {
        "x": 12.323300015471101,
        "y": 3.8465967395415808,
        "a": -11.931000187779881,
        "shapes": [
          {
            "r": 18,
            "x": 30,
            "y": 28
          }, {
            "x": 12,
            "y": 32,
            "w": 58,
            "h": 32
          }
        ]
      }, {
        "x": 19.699587234467785,
        "y": 10.29897078983545,
        "a": 2.8718130925751546,
        "shapes": [
          {
            "r": 37,
            "x": 90,
            "y": 40
          }, {
            "x": 49,
            "y": 59,
            "r": 20
          }
        ]
      }, {
        "x": 10.778058106993631,
        "y": 5.047338544468242,
        "a": 13.201050215975728,
        "shapes": [
          {
            "x": 26,
            "y": 4,
            "w": 41,
            "h": 91
          }
        ]
      }, {
        "x": 11.671088046543748,
        "y": 4.065897481563266,
        "a": 7.991763801087106,
        "shapes": [
          {
            "x": 43,
            "y": 34,
            "r": 31
          }
        ]
      }, {
        "x": 14.766186723188492,
        "y": 9.837711336068626,
        "a": 10.479634211607914,
        "shapes": [
          {
            "x": 7,
            "y": 1,
            "w": 51,
            "h": 154
          }
        ]
      }, {
        "x": 10.162379425122746,
        "y": 6.792643432858858,
        "a": 8.002978031479138,
        "shapes": [
          {
            "x": 50,
            "y": 46,
            "r": 28
          }, {
            "x": 54,
            "y": 98,
            "r": 32
          }
        ]
      }, {
        "x": 12.809443487308453,
        "y": 1.4977038048259605,
        "a": -19.37257229460358,
        "shapes": [
          {
            "x": 4,
            "y": 7,
            "w": 88,
            "h": 49
          }
        ]
      }, {
        "x": 8.007106549579278,
        "y": 6.319051912201984,
        "a": 43.473866249947534,
        "shapes": [
          {
            "x": 35,
            "y": 36,
            "r": 26
          }
        ]
      }, {
        "x": 10.505405101055622,
        "y": 5.0551576253364034,
        "a": 22.49650269720527,
        "shapes": [
          {
            "x": 53,
            "y": 49,
            "r": 44
          }
        ]
      }, {
        "x": 9.767136712039559,
        "y": 7.603619634335876,
        "a": 12.682970770830673,
        "shapes": [
          {
            "x": 53,
            "y": 71,
            "r": 32
          }, {
            "x": 29,
            "y": 46,
            "r": 16
          }
        ]
      }, {
        "x": 12.397408589095967,
        "y": 5.786530086979555,
        "a": 56.032734074510145,
        "shapes": [
          {
            "x": 21,
            "y": 32,
            "w": 89,
            "h": 60
          }
        ]
      }, {
        "x": 8.190003793641523,
        "y": 4.934742043413446,
        "a": -43.084996381290374,
        "shapes": [
          {
            "x": 7,
            "y": 26,
            "w": 51,
            "h": 36
          }, {
            "x": 27,
            "y": 23,
            "r": 17
          }
        ]
      }, {
        "x": 10.533059920401506,
        "y": 4.5769408248149395,
        "a": -32.63040934184026,
        "shapes": [
          {
            "x": 55,
            "y": 32,
            "r": 30
          }, {
            "x": 24,
            "y": 27,
            "r": 18
          }, {
            "x": 17,
            "y": 44,
            "r": 7
          }
        ]
      }, {
        "x": 16.9958769343146,
        "y": 2.274543821191903,
        "a": 1.0548678191798502,
        "shapes": [
          {
            "x": 14,
            "y": 38,
            "w": 43,
            "h": 113
          }, {
            "x": 34,
            "y": 40,
            "w": 13,
            "h": 33
          }, {
            "x": 57,
            "y": 45,
            "r": 17
          }
        ]
      }, {
        "x": 7.939480181609701,
        "y": 3.4160739750603977,
        "a": 163.80547124435023,
        "shapes": [
          {
            "x": 4,
            "y": 12,
            "w": 58,
            "h": 44
          }, {
            "x": 13,
            "y": 4,
            "w": 42,
            "h": 11
          }
        ]
      }, {
        "x": 13.405907708351902,
        "y": 5.481645139773989,
        "a": -46.02980863577727,
        "shapes": [
          {
            "x": 45,
            "y": 35,
            "r": 25
          }, {
            "x": 45,
            "y": 86,
            "r": 23
          }
        ]
      }, {
        "x": 12.527323535720809,
        "y": 5.8941459554959135,
        "a": 44.616495518946024,
        "shapes": [
          {
            "x": 53,
            "y": 33,
            "r": 27
          }, {
            "x": 6,
            "y": 35,
            "w": 34,
            "h": 60
          }
        ]
      }, {
        "x": 10.982598330564482,
        "y": 8.651135676741642,
        "a": 18.29152329547216,
        "shapes": [
          {
            "x": 36,
            "y": 39,
            "r": 22
          }, {
            "x": 34,
            "y": 78,
            "r": 27
          }
        ]
      }
    ]
  };

  doc = null;

  $(function() {
    var beginGameplay, beginLose, beginStartScreen, beginWin, currentLevel, doGameplay, doLoseScreenIn, doStartScreen, doWinScreenIn, timeout, totalLevels, transition;

    canvas = $('canvas')[0];
    if ((canvas != null ? canvas.getContext : void 0) == null) {
      alert('HTML5 Required, Dude');
      return;
    }
    g = canvas.getContext('2d');
    doc = $(this);
    doc.mousemove(function(e) {
      mouseX = e.pageX - canvas.offsetLeft;
      return mouseY = e.pageY - canvas.offsetTop;
    });
    doc.mousedown(function(e) {
      if (e.which !== 1) {
        return;
      }
      mouseX = e.pageX - canvas.offsetLeft;
      mouseY = e.pageY - canvas.offsetTop;
      mouseDown = true;
      mousePressed = true;
      if (mouseX >= 0 && mouseX < canvas.width && mouseY >= 0 && mouseY < canvas.height) {
        return e.preventDefault();
      }
    });
    doc.mouseup(function(e) {
      if (e.which !== 1) {
        return;
      }
      mouseX = e.pageX - canvas.offsetLeft;
      mouseY = e.pageY - canvas.offsetTop;
      mouseDown = false;
      mouseReleased = true;
      if (mouseX >= 0 && mouseX < canvas.width && mouseY >= 0 && mouseY < canvas.height) {
        return e.preventDefault();
      }
    });
    if (DEBUG_PHYSICS) {
      doc.on('keydown.debugPhysics', function(e) {
        if (e.which === 80) {
          showPhysics = !showPhysics;
        }
        return true;
      });
    }
    time = rawMillis();
    new Pencil;
    beginStartScreen = function() {
      var music;

      if ((new Audio()).canPlayType('audio/ogg; codecs=vorbis') === 'probably') {
        music = new Audio('audio/music.ogg');
        music.loop = true;
        music.play();
      }
      new World(startScreen);
      return doStartScreen();
    };
    doStartScreen = function() {
      var anySolid, tile, _i, _len, _ref;

      clearBackground();
      clearBackground();
      world.tick();
      anySolid = false;
      _ref = world.tiles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.isSolid()) {
          anySolid = true;
          break;
        }
      }
      if (!anySolid) {
        return beginGameplay();
      } else {
        world.draw();
        pencil.draw();
        return queueFrame(doStartScreen);
      }
    };
    transition = 0;
    timeout = 0;
    totalLevels = 2;
    currentLevel = 0;
    beginGameplay = function() {
      switch (currentLevel) {
        case 0:
          new World1;
          break;
        case 1:
          new World2;
          break;
        default:
          world = null;
      }
      if (world != null) {
        transition = 0;
        return doGameplay();
      }
    };
    doGameplay = function() {
      clearBackground();
      world.tick();
      transition += 0.1 * (1.0 - transition);
      if (transition < 0.99) {
        g.globalAlpha = transition;
      }
      world.draw();
      if (transition < 0.99) {
        g.globalAlpha = 1;
      }
      pencil.draw();
      switch (world.status) {
        case STATUS_LOSE:
          return beginLose();
        case STATUS_WIN:
          return beginWin();
        default:
          return queueFrame(doGameplay);
      }
    };
    beginLose = function() {
      transition = 0;
      timeout = 0;
      return queueFrame(doLoseScreenIn);
    };
    doLoseScreenIn = function() {
      var duration, u;

      duration = 4;
      transition += 0.1 * (1.0 - transition);
      clearBackground();
      u = timeout / (0.25 * duration);
      if (u > 1) {
        u = 1;
      }
      g.globalAlpha = (1 - u) * (1 - u);
      world.draw();
      g.globalAlpha = 1;
      g.drawImage(images.loseScreen, 0.5 * (canvas.width - images.loseScreen.width), 175 * transition);
      pencil.draw();
      timeout += deltaSeconds();
      if (timeout > duration) {
        return beginGameplay();
      } else {
        return queueFrame(doLoseScreenIn);
      }
    };
    beginWin = function() {
      transition = 0;
      timeout = 0;
      return queueFrame(doWinScreenIn);
    };
    doWinScreenIn = function() {
      var duration, u;

      duration = 4;
      transition += 0.1 * (1.0 - transition);
      clearBackground();
      u = timeout / (0.25 * duration);
      if (u > 1) {
        u = 1;
      }
      g.globalAlpha = (1 - u) * (1 - u);
      world.draw();
      g.globalAlpha = 1;
      g.drawImage(images.winScreen, 0.5 * (canvas.width - images.winScreen.width), 175 * transition);
      pencil.draw();
      timeout += deltaSeconds();
      if (timeout > duration && currentLevel < totalLevels - 1) {
        currentLevel++;
        return beginGameplay();
      } else {
        return queueFrame(doWinScreenIn);
      }
    };
    return (function() {
      if (images.loading()) {
        if (images.failed()) {
          return alert("Eek! Failed to load Assets :*(");
        } else {
          return queueFrame(arguments.callee);
        }
      } else {
        currentLevel = 1;
        return beginGameplay();
      }
    })();
  });

}).call(this);
